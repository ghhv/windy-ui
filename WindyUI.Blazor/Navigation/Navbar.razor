@inject NavigationManager NavigationManager;

@inherits NavigationParentBase

<CascadingValue Value="this" IsFixed="true">
    <header class="@TopLevelCssClass">
        <div class="flex justify-between px-2 md:px-6">
            <div class="md:hidden relative flex items-center justify-between">
                @if (HasMobileMenu)
                {
                    <MobileMenu IsOpen="IsMobileMenuOpen" ToggleMenu="ToggleMobileMenu" />
                }
            </div>
            <div class="md:hidden flex-shrink-0 flex items-center p-4">
                @MobileBrandingFragment
            </div>
            <div class="md:hidden flex-shrink-0 flex items-center p-4"></div>
            <div class="hidden md:flex md:items-center">
                @BrandingFragment
            </div>
            <div class="pr-2 hidden md:flex md:items-center md:ml-6">
                @NavigationFragment
            </div>
        </div>
    </header>
    <div class="@(!IsMobileMenuOpen ? "block" : "hidden") md:hidden md:max-w-md @MobileMenuColorCss">
        @MobileNavigationFragment
    </div>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? BrandingFragment { get; set; }

    [Parameter]
    public RenderFragment? NavigationFragment { get; set; }

    [Parameter]
    public RenderFragment? MobileBrandingFragment { get; set; }

    [Parameter]
    public RenderFragment? MobileNavigationFragment { get; set; }

    [Parameter]
    public EventCallback OnMobileMenuClick { get; set; }

    [Parameter]
    public bool HasMobileMenu { get; set; } = true;

    private string MobileMenuColorCss
    {
        get
        {
            var mobileColor = "";

            switch (Color)
            {
                case NavigationColors.Primary:
                    mobileColor = $"bg-primary-dark";
                    break;
                case NavigationColors.PrimaryDark:
                case NavigationColors.PrimaryLight:
                    mobileColor = "bg-primary";
                    break;
                case NavigationColors.Secondary:
                    mobileColor = "bg-secondary-dark";
                    break;
                case NavigationColors.SecondaryDark:
                case NavigationColors.SecondaryLight:
                    mobileColor = "bg-secondary";
                    break;
            }

            return mobileColor;
        }
    }

    private string TopLevelCssClass
    {
        get
        {
            var baseClass = "shadow-lg h-16 md:pt-3";

            return $"{ColorSelector.GetBackgroundColor(Color)} {baseClass}";
        }
    }

    private bool IsMobileMenuOpen { get; set; } = false;

    private async Task ToggleMobileMenu()
    {
        IsMobileMenuOpen = !IsMobileMenuOpen;
        if(OnMobileMenuClick.HasDelegate)
        {
            await OnMobileMenuClick.InvokeAsync();
        }
    }
}