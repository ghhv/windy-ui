@inject NavigationManager NavigationManager;


<CascadingValue Value="this" IsFixed="true">
    <header class="bg-primary-dark shadow-lg lg:h-16 pt-3">
        <div class="flex justify-between px-2 md:px-6">
            <div class="lg:hidden relative flex items-center justify-between h-16">
                <MobileMenu IsOpen="IsMobileMenuOpen" ToggleMenu="ToggleMobileMenu" />
            </div>
            <div class="lg:hidden flex-shrink-0 flex items-center p-4">
                @MobileBrandingFragment
            </div>
            <div class="hidden lg:flex lg:items-center">
                @BrandingFragment
            </div>
            <div class="pr-2 hidden lg:flex lg:items-center md:ml-6">
                @NavigationFragment
            </div>
        </div>
        <div class="@(!IsMobileMenuOpen ? "block" : "hidden") md:hidden sm:max-w-md">
            @MobileNavigationFragment
        </div>
    </header>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? BrandingFragment { get; set; }

    [Parameter]
    public RenderFragment? NavigationFragment { get; set; }

    [Parameter]
    public RenderFragment? MobileBrandingFragment { get; set; }

    [Parameter]
    public RenderFragment? MobileNavigationFragment { get; set; }

    [Parameter]
    public NavbarColors Color { get; set; } = NavbarColors.Primary;

    private string ColorClass
    {
        get
        {
            return "";
        }
    }

    [Parameter]
    public string CssClass { get; set; } = "";

    private bool IsMobileMenuOpen { get; set; } = false;

    public void ToggleMobileMenu()
    {
        IsMobileMenuOpen = !IsMobileMenuOpen;
    }
}